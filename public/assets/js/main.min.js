class Form {
    constructor(selector) {
        const form = document.querySelector(selector)
        if (form === null) {
            return false
        }

        const submitBtn = form.querySelector('.form__submit')
    
        form.addEventListener('focusin', this.clearForm)
        form.addEventListener('submit', async e => {
            e.preventDefault()
    
            submitBtn.disabled = true
    
            if (this.validation(e.target)) {
                console.log('Valid OK')
            }
            
            submitBtn.disabled = false
        })    
    }

    clearForm(e) {
        if (e.target.classList.contains('form__control')) {
            e.target.classList.remove('is-invalid')
            e.target.classList.remove('is-valid')
        }
    }
    
    validation(form) {
        let patterns = {
            notEmpty: /.+/,
            email: /^.+@.+\..+$/,
            phone: /^([+]?[\s0-9]+)?(\d{3}|[(]?[0-9]+[)])?([-]?[\s]?[0-9])+$/
        }
    
        let fields = form.querySelectorAll('.form__control')
        let isValid = true
        
        fields.forEach(f => {
            let pattern = patterns[f.dataset.valid]
            f.value = f.value.trim()
            
            if (pattern.test(f.value)) {
                f.classList.add('is-valid')
            } else {
                f.classList.add('is-invalid')
                isValid = false
            }
        })
        return isValid
    }
}
;window.addEventListener('DOMContentLoaded', () => {
    // Carousel
    const carouselShowcase = document.querySelector('#carouselShowcase')
    const carousel = new bootstrap.Carousel(carouselShowcase, {
        interval: 6000,
        pause: 'hover'
    })

    // Modal video
    const videoBtn = document.querySelector('.video-player__btn')
    const $videoModal = document.getElementById('videoModal')
    const videoFrame = document.querySelector('#videoModal iframe')

    const videoModal = new bootstrap.Modal($videoModal, {
        keyboard: true
    })

    videoBtn.addEventListener('click', e => {
        if (e.currentTarget.classList.contains('video-player__btn')) {
            videoFrame.setAttribute('src', e.currentTarget.dataset.video)
            videoModal.show()                
        }
    })

    $videoModal.addEventListener('hide.bs.modal', function (event) {
        videoFrame.setAttribute('src', '')
    })

    // BaguetteBox
    baguetteBox.run('.gallery__list')
})
;class Accord {
    constructor(selector) {
        const accordion = document.querySelector(selector)
        if (accordion === null) {
            return false
        }

        accordion.addEventListener('click', e => {
            if (!e.target.classList.contains('accord__header')) {
                return false
            }
    
            let accordionItem = e.target.parentNode
    
            let isOpen = accordionItem.classList.contains('accord__item--open')
    
            if (isOpen) {
                this.close(accordionItem)
            } else {
                let openItem = accordion.querySelector('.accord__item--open')
                if (openItem) {
                    this.close(openItem)
                }
                this.open(accordionItem)
            }
        })    
    }

    open(item) {
        item.classList.add('accord__item--open')
    
        let i = item.querySelector('.fas')
        i.classList.remove('fa-angle-down')
        i.classList.add('fa-angle-up')
    }
    
    close(item) {
        item.classList.remove('accord__item--open')
    
        let i = item.querySelector('.fas')
        i.classList.add('fa-angle-down')
        i.classList.remove('fa-angle-up')
    }
}
;class Slider {
    constructor(selector, activeClass) {
        const slides = document.querySelectorAll(selector)

        let index = 0;

        setInterval(() => {
            slides[index].classList.remove(activeClass)

            index = index < (slides.length - 1) ? index + 1 : 0
            
            slides[index].classList.add(activeClass)
        }, 3000)
    }
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvcm0uanMiLCJtYWluLmpzIiwic2VydmljZXMuanMiLCJzbGlkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0N0REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQy9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0M1Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Im1haW4ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgRm9ybSB7XHJcbiAgICBjb25zdHJ1Y3RvcihzZWxlY3Rvcikge1xyXG4gICAgICAgIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKVxyXG4gICAgICAgIGlmIChmb3JtID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgc3VibWl0QnRuID0gZm9ybS5xdWVyeVNlbGVjdG9yKCcuZm9ybV9fc3VibWl0JylcclxuICAgIFxyXG4gICAgICAgIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcignZm9jdXNpbicsIHRoaXMuY2xlYXJGb3JtKVxyXG4gICAgICAgIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgYXN5bmMgZSA9PiB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKVxyXG4gICAgXHJcbiAgICAgICAgICAgIHN1Ym1pdEJ0bi5kaXNhYmxlZCA9IHRydWVcclxuICAgIFxyXG4gICAgICAgICAgICBpZiAodGhpcy52YWxpZGF0aW9uKGUudGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1ZhbGlkIE9LJylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgc3VibWl0QnRuLmRpc2FibGVkID0gZmFsc2VcclxuICAgICAgICB9KSAgICBcclxuICAgIH1cclxuXHJcbiAgICBjbGVhckZvcm0oZSkge1xyXG4gICAgICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2Zvcm1fX2NvbnRyb2wnKSkge1xyXG4gICAgICAgICAgICBlLnRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1pbnZhbGlkJylcclxuICAgICAgICAgICAgZS50YXJnZXQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtdmFsaWQnKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgdmFsaWRhdGlvbihmb3JtKSB7XHJcbiAgICAgICAgbGV0IHBhdHRlcm5zID0ge1xyXG4gICAgICAgICAgICBub3RFbXB0eTogLy4rLyxcclxuICAgICAgICAgICAgZW1haWw6IC9eLitALitcXC4uKyQvLFxyXG4gICAgICAgICAgICBwaG9uZTogL14oWytdP1tcXHMwLTldKyk/KFxcZHszfXxbKF0/WzAtOV0rWyldKT8oWy1dP1tcXHNdP1swLTldKSskL1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIGxldCBmaWVsZHMgPSBmb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJy5mb3JtX19jb250cm9sJylcclxuICAgICAgICBsZXQgaXNWYWxpZCA9IHRydWVcclxuICAgICAgICBcclxuICAgICAgICBmaWVsZHMuZm9yRWFjaChmID0+IHtcclxuICAgICAgICAgICAgbGV0IHBhdHRlcm4gPSBwYXR0ZXJuc1tmLmRhdGFzZXQudmFsaWRdXHJcbiAgICAgICAgICAgIGYudmFsdWUgPSBmLnZhbHVlLnRyaW0oKVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKHBhdHRlcm4udGVzdChmLnZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgZi5jbGFzc0xpc3QuYWRkKCdpcy12YWxpZCcpXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmLmNsYXNzTGlzdC5hZGQoJ2lzLWludmFsaWQnKVxyXG4gICAgICAgICAgICAgICAgaXNWYWxpZCA9IGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIHJldHVybiBpc1ZhbGlkXHJcbiAgICB9XHJcbn1cclxuIiwid2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XHJcbiAgICAvLyBDYXJvdXNlbFxyXG4gICAgY29uc3QgY2Fyb3VzZWxTaG93Y2FzZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjYXJvdXNlbFNob3djYXNlJylcclxuICAgIGNvbnN0IGNhcm91c2VsID0gbmV3IGJvb3RzdHJhcC5DYXJvdXNlbChjYXJvdXNlbFNob3djYXNlLCB7XHJcbiAgICAgICAgaW50ZXJ2YWw6IDYwMDAsXHJcbiAgICAgICAgcGF1c2U6ICdob3ZlcidcclxuICAgIH0pXHJcblxyXG4gICAgLy8gTW9kYWwgdmlkZW9cclxuICAgIGNvbnN0IHZpZGVvQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnZpZGVvLXBsYXllcl9fYnRuJylcclxuICAgIGNvbnN0ICR2aWRlb01vZGFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZpZGVvTW9kYWwnKVxyXG4gICAgY29uc3QgdmlkZW9GcmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN2aWRlb01vZGFsIGlmcmFtZScpXHJcblxyXG4gICAgY29uc3QgdmlkZW9Nb2RhbCA9IG5ldyBib290c3RyYXAuTW9kYWwoJHZpZGVvTW9kYWwsIHtcclxuICAgICAgICBrZXlib2FyZDogdHJ1ZVxyXG4gICAgfSlcclxuXHJcbiAgICB2aWRlb0J0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xyXG4gICAgICAgIGlmIChlLmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCd2aWRlby1wbGF5ZXJfX2J0bicpKSB7XHJcbiAgICAgICAgICAgIHZpZGVvRnJhbWUuc2V0QXR0cmlidXRlKCdzcmMnLCBlLmN1cnJlbnRUYXJnZXQuZGF0YXNldC52aWRlbylcclxuICAgICAgICAgICAgdmlkZW9Nb2RhbC5zaG93KCkgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuXHJcbiAgICAkdmlkZW9Nb2RhbC5hZGRFdmVudExpc3RlbmVyKCdoaWRlLmJzLm1vZGFsJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgdmlkZW9GcmFtZS5zZXRBdHRyaWJ1dGUoJ3NyYycsICcnKVxyXG4gICAgfSlcclxuXHJcbiAgICAvLyBCYWd1ZXR0ZUJveFxyXG4gICAgYmFndWV0dGVCb3gucnVuKCcuZ2FsbGVyeV9fbGlzdCcpXHJcbn0pXHJcbiIsImNsYXNzIEFjY29yZCB7XHJcbiAgICBjb25zdHJ1Y3RvcihzZWxlY3Rvcikge1xyXG4gICAgICAgIGNvbnN0IGFjY29yZGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpXHJcbiAgICAgICAgaWYgKGFjY29yZGlvbiA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFjY29yZGlvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIWUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnYWNjb3JkX19oZWFkZXInKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICBsZXQgYWNjb3JkaW9uSXRlbSA9IGUudGFyZ2V0LnBhcmVudE5vZGVcclxuICAgIFxyXG4gICAgICAgICAgICBsZXQgaXNPcGVuID0gYWNjb3JkaW9uSXRlbS5jbGFzc0xpc3QuY29udGFpbnMoJ2FjY29yZF9faXRlbS0tb3BlbicpXHJcbiAgICBcclxuICAgICAgICAgICAgaWYgKGlzT3Blbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZShhY2NvcmRpb25JdGVtKVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGV0IG9wZW5JdGVtID0gYWNjb3JkaW9uLnF1ZXJ5U2VsZWN0b3IoJy5hY2NvcmRfX2l0ZW0tLW9wZW4nKVxyXG4gICAgICAgICAgICAgICAgaWYgKG9wZW5JdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZShvcGVuSXRlbSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMub3BlbihhY2NvcmRpb25JdGVtKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkgICAgXHJcbiAgICB9XHJcblxyXG4gICAgb3BlbihpdGVtKSB7XHJcbiAgICAgICAgaXRlbS5jbGFzc0xpc3QuYWRkKCdhY2NvcmRfX2l0ZW0tLW9wZW4nKVxyXG4gICAgXHJcbiAgICAgICAgbGV0IGkgPSBpdGVtLnF1ZXJ5U2VsZWN0b3IoJy5mYXMnKVxyXG4gICAgICAgIGkuY2xhc3NMaXN0LnJlbW92ZSgnZmEtYW5nbGUtZG93bicpXHJcbiAgICAgICAgaS5jbGFzc0xpc3QuYWRkKCdmYS1hbmdsZS11cCcpXHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNsb3NlKGl0ZW0pIHtcclxuICAgICAgICBpdGVtLmNsYXNzTGlzdC5yZW1vdmUoJ2FjY29yZF9faXRlbS0tb3BlbicpXHJcbiAgICBcclxuICAgICAgICBsZXQgaSA9IGl0ZW0ucXVlcnlTZWxlY3RvcignLmZhcycpXHJcbiAgICAgICAgaS5jbGFzc0xpc3QuYWRkKCdmYS1hbmdsZS1kb3duJylcclxuICAgICAgICBpLmNsYXNzTGlzdC5yZW1vdmUoJ2ZhLWFuZ2xlLXVwJylcclxuICAgIH1cclxufVxyXG4iLCJjbGFzcyBTbGlkZXIge1xyXG4gICAgY29uc3RydWN0b3Ioc2VsZWN0b3IsIGFjdGl2ZUNsYXNzKSB7XHJcbiAgICAgICAgY29uc3Qgc2xpZGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcilcclxuXHJcbiAgICAgICAgbGV0IGluZGV4ID0gMDtcclxuXHJcbiAgICAgICAgc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgICAgICAgICBzbGlkZXNbaW5kZXhdLmNsYXNzTGlzdC5yZW1vdmUoYWN0aXZlQ2xhc3MpXHJcblxyXG4gICAgICAgICAgICBpbmRleCA9IGluZGV4IDwgKHNsaWRlcy5sZW5ndGggLSAxKSA/IGluZGV4ICsgMSA6IDBcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHNsaWRlc1tpbmRleF0uY2xhc3NMaXN0LmFkZChhY3RpdmVDbGFzcylcclxuICAgICAgICB9LCAzMDAwKVxyXG4gICAgfVxyXG59Il19
